/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.classandobject;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Agent
 */
public class AutoMpicS extends javax.swing.JFrame implements Runnable {
    
    
    Image image;
    int bSize = 50;
    int x;
    int y;
    int direction = 0;
    int step = 10;
    int size;
    int centerX;
    int centerY;
    int offset;
    boolean movingToCenter = false;
    /**
     * Creates new form AutoMpicS
     */
    public AutoMpicS() {
        initComponents();
        super.setSize(600, 600);
        image = Toolkit.getDefaultToolkit().createImage("C:\\Users\\Agent\\Downloads\\pic1.jpg");
        centerX = (super.getWidth() - bSize) / 2;
        centerY = (super.getHeight() - bSize) / 2;
        size = Math.min(super.getWidth(), super.getHeight()) / 2 - bSize; 
        offset = 0;
        x = centerX - size;
        y = centerY - size;
        
        new Thread(this).start();
    }
    
    public void paint(Graphics g) {
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, super.getWidth(), super.getHeight());
        g.drawImage(image, x, y, bSize, bSize, this);
    }
    
    @Override
    public void run() {
        while (size > 0) {
            try {
                Thread.sleep(50);
            } catch (InterruptedException ex) {
                Logger.getLogger(AutoMovePic.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if (movingToCenter) {
                moveToCenter();
            } else {
                moveInSpiral();
            }
            
            repaint();
        }
    }
    
    private void moveInSpiral() {
        switch (direction) {
            case 0: 
                x += step;
                if (x >= centerX + size - offset) direction = 1;
                break;
            case 1: 
                y += step;
                if (y >= centerY + size - offset) direction = 2;
                break;
            case 2: 
                x -= step;
                if (x <= centerX - size + offset) direction = 3;
                break;
            case 3:
                y -= step;
                if (y <= centerY - size + offset) {
                    direction = 0;
                    size -= 2 * step;
                    offset += step; 
                    if (size < 0) {
                        movingToCenter = true;
                    }
                }
                break;
        }
    }
    
    private void moveToCenter() {
        
        if (x < centerX) x += step;
        if (x > centerX) x -= step;
        if (y < centerY) y += step;
        if (y > centerY) y -= step;

        if (x == centerX && y == centerY) {
            
            size = Math.min(super.getWidth(), super.getHeight()) / 2 - bSize;
            offset = 0;
            direction = 0;
            movingToCenter = false;
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AutoMpicS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AutoMpicS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AutoMpicS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AutoMpicS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AutoMpicS().setVisible(true);
            }
        });
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
